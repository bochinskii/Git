---------
Установка
---------

Оффициальный сайт

https://git-scm.com/

--------------------
Установка на Windows
--------------------

https://git-scm.com/download/win

Установка очень простая

-------------------
Установка на Linux
------------------

https://git-scm.com/download/linux

Установка очень простая

------------
Конфигурация
------------

Установим свое имя и электронный адрес.

Запишем их в переменные т.к. так проще (Windows)

SET GIT_USERNAME=Denis Bochinskii
SET GIT_USEREMAIL=denis.bochinskii@gmail.com

$ git config --global user.name "%GIT_USERNAME%"

$ git config --global user.email "%GIT_USEREMAIL%"

$ git config -l
...
user.name=Denis Bochinskii
user.email=denis.bochinskii@gmail.com


Запишем их в переменные т.к. так проще (Linux)

export GIT_USERNAME="Denis Bochinskii"
export GIT_USEREMAIL="denis.bochinskii@gmail.com"

$ git config --global user.name "$GIT_USERNAME"

$ git config --global user.email "$GIT_USEREMAIL"

$ git config -l
user.name=Denis Bochinskii
user.email=denis.bochinskii@gmail.com

Посмотреть сам файл конфигурации (Windows)

$ type %userprofile%\.gitconfig
[user]
        name = Denis Bochinskii
        email = denis.bochinskii@gmail.com


Посмотреть сам файл конфигурации (Linux)

$ cat ~/.gitconfig
[user]
	name = Denis Bochinskii
	email = denis.bochinskii@gmail.com




--------------------------------------------------
Работа с локальным репозиторием (Local Repository)
--------------------------------------------------

У нас будет директори с именем, например - "Git". Она будет находится в домашней
диретории определенного пользователя.

---------------------------------
Инициализируем репозиторий (Init)
---------------------------------

Мы хотим превратить данную директорию в локальный репозиторий.

$ git init ~/Git

или

$ cd ~/WORK/Git
$ git init .

Как мы видим, появилась дериктория ".git", которая, по сути, является базой данных.

$ ls -la
total 19496
drwxrwxr-x 3 denisb denisb     4096 апр 25 13:29 .
drwxrwxr-x 8 denisb denisb     4096 апр 25 13:05 ..
drwxrwxr-x 7 denisb denisb     4096 апр 25 13:29 .git

Проверим статус нашего репозитория.

$ git status
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)



Создадим файл

$ echo "Hello" > file_1.txt

Как мы видим, у нас есть файл, который не находятся в базе данных, а значит,
он не отслеживается (untracked) репозиторием.

$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	file_1.txt

nothing added to commit but untracked files present (use "git add" to track)

Добавим данный файл (или все файлы в данной диретории) в подготовительный статус
(staging)

$ git add .

$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	new file:   file_1.txt


Добавим наши файлы в базу данных git, т.е. копируем в локальный репозиторий
(Copy to Local Repository)

$ git commit -m "We added file - file_1.txt"
[master (root-commit) f689eda] We added file - file_1.txt
 1 file changed, 1 insertion(+)
 create mode 100644 file_1.txt

$ git status
On branch master
nothing to commit, working tree clean



Добавим  еще один файл и отредактируем уже существующий

$ echo "World" >> file_1.txt
$ echo "Hello" > file_2.txt

 Тут показано, что у нас есть модифицированный файл (file_1.txt) в состоянии
 staged т.к. он добавлен ранее. Так же файл, который еще не был добавлен, т.е.
 он имеет статус - untracked.

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   file_1.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	file_2.txt

no changes added to commit (use "git add" and/or "git commit -a")


Добавим их всех в наш репозиторий

$ git add .
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   file_1.txt
	new file:   file_2.txt


$ git commit -m "We added file - file_2.txt and modify file - file_1.txt"
[master 2283f7e] We added file - file_2.txt and modify file - file_1.txt
 2 files changed, 2 insertions(+)
 create mode 100644 file_2.txt

$ git status
On branch master
nothing to commit, working tree clean



-----------------
История изменений
-----------------


Посмотреть историю изменений. Если помните, мы делали два раза - commit.

$ git log
commit 2283f7eb5674bd8cf40e946292d012931e1f9d6c (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Mon Apr 25 17:59:49 2022 +0300

    We added file - file_2.txt and modify file - file_1.txt

commit f689edad2a1a6c97a7a85446c760bb63c76b9196
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Mon Apr 25 17:52:34 2022 +0300

    We added file - file_1.txt


Посмотреть определенное количество последних commit'ов.
В нашем случае посмотрели последний (один) commit.

$ git log -1
commit 2283f7eb5674bd8cf40e946292d012931e1f9d6c (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Mon Apr 25 17:59:49 2022 +0300

    We added file - file_2.txt and modify file - file_1.txt


Посмотреть контент того, что было сделано в определенных commit'ах.
В нашем случае посмотрели контент последнего (одиного) commit'а.

Касательно файла - "file_1.txt".
Мы видим, что данный файл был еще создан до данного commit'а (""--- a/file_1.txt").
Строки перед которыми стоит знак - "-" удалились, а знак - "+" - добавились.
Если перед строкой не стоит знака, то это значит, что данная строка не изменялась.
В нашем случае мы не удаляли строк, поэтому таких нет.

Касательно файла - "file_2.txt".
Ми видим, что данного файла не существовало до данного commit'а (--- /dev/null).

$ git log -1 -p
commit 2283f7eb5674bd8cf40e946292d012931e1f9d6c (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Mon Apr 25 17:59:49 2022 +0300

    We added file - file_2.txt and modify file - file_1.txt

diff --git a/file_1.txt b/file_1.txt
index e965047..f9264f7 100644
--- a/file_1.txt
+++ b/file_1.txt
@@ -1 +1,2 @@
 Hello
+World
diff --git a/file_2.txt b/file_2.txt
new file mode 100644
index 0000000..e965047
--- /dev/null
+++ b/file_2.txt
@@ -0,0 +1 @@
+Hello


Модифицируем файл - file_1.txt.
Изменим первую и вторую строки и добавим еще одну.

$ nano file_1.txt
hello this cruel
world
How are you doing?

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   file_1.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git add .

$ git commit -m "We modified file - file_1.txt"
[master c41d8d6] We modified file - file_1.txt
 1 file changed, 3 insertions(+), 2 deletions(-)
$ git status
On branch master
nothing to commit, working tree clean

Как можно заметить т.к. мы модифицировали две строки, они по факту удалились и
вместо них добавились другие строки. Ну и третья строка, просто была добавлена.
$ git log -1 -p
commit c41d8d6555c7c870b21ceda07d215d21946f44e2 (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Mon Apr 25 18:12:23 2022 +0300

    We modified file - file_1.txt

diff --git a/file_1.txt b/file_1.txt
index f9264f7..72711a5 100644
--- a/file_1.txt
+++ b/file_1.txt
@@ -1,2 +1,3 @@
-Hello
-World
+hello this cruel
+world
+How are you doing?


Теперь, давайте испортим файл.

Был такой

$ cat file_2.txt
Hello

Стал такой

$ nano file_2.txt
Hegdfsgdsfgllo
dsgodjg[jisdegsfg
gfdfsgdsfg

gdfsgdsfg


dfsgdfsgds

Мы хоти вернуть его к предыдущей версии, т.е. до того момента, как мы его изменили
и сохранили. Вот в чем сила Git.

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   file_2.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git restore file_2.txt

$ cat file_2.txt
Hello


Посмотреть разницу между последним commit'ом и файлами, которые находятся в состоянии
staged.

Сделаем изменения

$ echo "Hello World" > file_3.txt
$ echo "Hello World" >> file_2.txt

$ git add .

$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   file_2.txt
	new file:   file_3.txt

$ git diff --staged
diff --git a/file_2.txt b/file_2.txt
index e965047..727b041 100644
--- a/file_2.txt
+++ b/file_2.txt
@@ -1 +1,2 @@
 Hello
+Hello World
diff --git a/file_3.txt b/file_3.txt
new file mode 100644
index 0000000..557db03
--- /dev/null
+++ b/file_3.txt
@@ -0,0 +1 @@
+Hello World

Это пригодится дл того, чтобы перед commit'ом еще раз убедится в том,
какие изменения будут сделаны в репозиторий.

Вот например, мы поняли, что не хотим копировать их в репозиторий.

$ git restore --staged file_2.txt
$ git restore --staged file_3.txt

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   file_2.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	file_3.txt

no changes added to commit (use "git add" and/or "git commit -a")

Ну, и если мы хоти, то можем убрать изменения сделанные после последнего
commit'а.

$ git restore file_2.txt

$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	file_3.txt

nothing added to commit but untracked files present (use "git add" to track)


---------------------------------
Игнорирование файлов и директорий
---------------------------------

Например у нас есть файлы или директории, которые я не хочу отправлять в репозиторий

$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	file_3.txt

nothing added to commit but untracked files present (use "git add" to track)

$ nano .gitignore
file_3.txt

$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	.gitignore

nothing added to commit but untracked files present (use "git add" to track)

$ git add .

$ git commit -m "We add file - .gitignore"

$ git status
On branch master
nothing to commit, working tree clean



---------------------------------
Разъяснение касательно директорий
---------------------------------

Что касается папок в репозитории, так они попадают туда, если там есть файлы

$ mkdir {folder_1,folder_2}

$ git status
On branch master
nothing to commit, working tree clean

$ cp file_1.txt folder_1/
$ cp file_1.txt folder_2/

Как мы видим, теперь директории попали в репозиторий, но не видно что именно в них.

$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	folder_1/
	folder_2/

nothing added to commit but untracked files present (use "git add" to track)

Чтобы увидеть какие именно файлы в директориях

$ git status -uall
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	folder_1/file_1.txt
	folder_2/file_1.txt

nothing added to commit but untracked files present (use "git add" to track)

$ git add .

$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	new file:   folder_1/file_1.txt
	new file:   folder_2/file_1.txt

$ git commit -m "Copy file_1.txt, file_2.txt in folder_1 folder"
[master 68484f6] Copy file_1.txt, file_2.txt in folder_1 folder
 2 files changed, 6 insertions(+)
 create mode 100644 folder_1/file_1.txt
 create mode 100644 folder_2/file_1.txt
denisb@denisb-ws:~/WORK/test$ git status
On branch master
nothing to commit, working tree clean

Директории, так же как и файлы можно игнорировать репозиторием

$ mkdir folder_3
$ cp file_2.txt folder_3/

$ git status -uall
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	folder_3/file_2.txt

nothing added to commit but untracked files present (use "git add" to track)

$ nano .gitignore
file_3.txt
folder_3/*

Как мы видим у нас только появились изменения в конфигурационном файле, а директория
игнорируется.

$ git status -uall
On branch master
Changes not staged for commit:
 (use "git add <file>..." to update what will be committed)
 (use "git restore <file>..." to discard changes in working directory)
 modified:   .gitignore

no changes added to commit (use "git add" and/or "git commit -a")

$ git add .

$ git commit -m "Modified .gitignore file"
[master dc70abc] Modified .gitignore file
 1 file changed, 1 insertion(+)

$ git status -uall
On branch master
nothing to commit, working tree clean









-------------------------------------------------
