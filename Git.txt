---------
Установка
---------

Оффициальный сайт

https://git-scm.com/

--------------------
Установка на Windows
--------------------

https://git-scm.com/download/win

Установка очень простая

-------------------
Установка на Linux
------------------

https://git-scm.com/download/linux

Установка очень простая

------------
Конфигурация
------------

Установим свое имя и электронный адрес.

Запишем их в переменные т.к. так проще (Windows)

SET GIT_USERNAME=Denis Bochinskii
SET GIT_USEREMAIL=denis.bochinskii@gmail.com

$ git config --global user.name "%GIT_USERNAME%"

$ git config --global user.email "%GIT_USEREMAIL%"

$ git config -l
...
user.name=Denis Bochinskii
user.email=denis.bochinskii@gmail.com


Запишем их в переменные т.к. так проще (Linux)

export GIT_USERNAME="Denis Bochinskii"
export GIT_USEREMAIL="denis.bochinskii@gmail.com"

$ git config --global user.name "$GIT_USERNAME"

$ git config --global user.email "$GIT_USEREMAIL"

$ git config -l
user.name=Denis Bochinskii
user.email=denis.bochinskii@gmail.com

Посмотреть сам файл конфигурации (Windows)

$ type %userprofile%\.gitconfig
[user]
        name = Denis Bochinskii
        email = denis.bochinskii@gmail.com


Посмотреть сам файл конфигурации (Linux)

$ cat ~/.gitconfig
[user]
	name = Denis Bochinskii
	email = denis.bochinskii@gmail.com




--------------------------------------------------
Работа с локальным репозиторием (Local Repository)
--------------------------------------------------

У нас будет директори с именем, например - "Git". Она будет находится в домашней
диретории определенного пользователя.

---------------------------------
Инициализируем репозиторий (Init)
---------------------------------

Мы хотим превратить данную директорию в локальный репозиторий.

$ git init ~/Git

или

$ cd ~/WORK/Git
$ git init .

Как мы видим, появилась дериктория ".git", которая, по сути, является базой данных.

$ ls -la
total 19496
drwxrwxr-x 3 denisb denisb     4096 апр 25 13:29 .
drwxrwxr-x 8 denisb denisb     4096 апр 25 13:05 ..
drwxrwxr-x 7 denisb denisb     4096 апр 25 13:29 .git

Проверим статус нашего репозитория.

$ git status
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)



Создадим файл

$ echo "Hello" > file_1.txt

Как мы видим, у нас есть файл, который не находятся в базе данных, а значит,
он не отслеживается (untracked) репозиторием.

$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	file_1.txt

nothing added to commit but untracked files present (use "git add" to track)

Добавим данный файл (или все файлы в данной диретории) в подготовительный статус
(staging)

$ git add .

$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	new file:   file_1.txt


Добавим наши файлы в базу данных git, т.е. копируем в локальный репозиторий
(Copy to Local Repository)

$ git commit -m "We added file - file_1.txt"
[master (root-commit) f689eda] We added file - file_1.txt
 1 file changed, 1 insertion(+)
 create mode 100644 file_1.txt

$ git status
On branch master
nothing to commit, working tree clean



Добавим  еще один файл и отредактируем уже существующий

$ echo "World" >> file_1.txt
$ echo "Hello" > file_2.txt

 Тут показано, что у нас есть модифицированный файл (file_1.txt) в состоянии
 staged т.к. он добавлен ранее. Так же файл, который еще не был добавлен, т.е.
 он имеет статус - untracked.

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   file_1.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	file_2.txt

no changes added to commit (use "git add" and/or "git commit -a")


Добавим их всех в наш репозиторий

$ git add .
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   file_1.txt
	new file:   file_2.txt


$ git commit -m "We added file - file_2.txt and modify file - file_1.txt"
[master 2283f7e] We added file - file_2.txt and modify file - file_1.txt
 2 files changed, 2 insertions(+)
 create mode 100644 file_2.txt

$ git status
On branch master
nothing to commit, working tree clean



-----------------
История изменений
-----------------


Посмотреть историю изменений. Если помните, мы делали два раза - commit.

$ git log
commit 2283f7eb5674bd8cf40e946292d012931e1f9d6c (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Mon Apr 25 17:59:49 2022 +0300

    We added file - file_2.txt and modify file - file_1.txt

commit f689edad2a1a6c97a7a85446c760bb63c76b9196
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Mon Apr 25 17:52:34 2022 +0300

    We added file - file_1.txt


Посмотреть определенное количество последних commit'ов.
В нашем случае посмотрели последний (один) commit.

$ git log -1
commit 2283f7eb5674bd8cf40e946292d012931e1f9d6c (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Mon Apr 25 17:59:49 2022 +0300

    We added file - file_2.txt and modify file - file_1.txt


Посмотреть контент того, что было сделано в определенных commit'ах.
В нашем случае посмотрели контент последнего (одиного) commit'а.

Касательно файла - "file_1.txt".
Мы видим, что данный файл был еще создан до данного commit'а (""--- a/file_1.txt").
Строки перед которыми стоит знак - "-" удалились, а знак - "+" - добавились.
Если перед строкой не стоит знака, то это значит, что данная строка не изменялась.
В нашем случае мы не удаляли строк, поэтому таких нет.

Касательно файла - "file_2.txt".
Ми видим, что данного файла не существовало до данного commit'а (--- /dev/null).

$ git log -1 -p
commit 2283f7eb5674bd8cf40e946292d012931e1f9d6c (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Mon Apr 25 17:59:49 2022 +0300

    We added file - file_2.txt and modify file - file_1.txt

diff --git a/file_1.txt b/file_1.txt
index e965047..f9264f7 100644
--- a/file_1.txt
+++ b/file_1.txt
@@ -1 +1,2 @@
 Hello
+World
diff --git a/file_2.txt b/file_2.txt
new file mode 100644
index 0000000..e965047
--- /dev/null
+++ b/file_2.txt
@@ -0,0 +1 @@
+Hello


Модифицируем файл - file_1.txt.
Изменим первую и вторую строки и добавим еще одну.

$ nano file_1.txt
hello this cruel
world
How are you doing?

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   file_1.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git add .

$ git commit -m "We modified file - file_1.txt"
[master c41d8d6] We modified file - file_1.txt
 1 file changed, 3 insertions(+), 2 deletions(-)
$ git status
On branch master
nothing to commit, working tree clean

Как можно заметить т.к. мы модифицировали две строки, они по факту удалились и
вместо них добавились другие строки. Ну и третья строка, просто была добавлена.
$ git log -1 -p
commit c41d8d6555c7c870b21ceda07d215d21946f44e2 (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Mon Apr 25 18:12:23 2022 +0300

    We modified file - file_1.txt

diff --git a/file_1.txt b/file_1.txt
index f9264f7..72711a5 100644
--- a/file_1.txt
+++ b/file_1.txt
@@ -1,2 +1,3 @@
-Hello
-World
+hello this cruel
+world
+How are you doing?


Теперь, давайте испортим файл.

Был такой

$ cat file_2.txt
Hello

Стал такой

$ nano file_2.txt
Hegdfsgdsfgllo
dsgodjg[jisdegsfg
gfdfsgdsfg

gdfsgdsfg


dfsgdfsgds

Мы хоти вернуть его к предыдущей версии, т.е. до того момента, как мы его изменили
и сохранили. Вот в чем сила Git.

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   file_2.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git restore file_2.txt

$ cat file_2.txt
Hello


Посмотреть разницу между последним commit'ом и файлами, которые находятся в состоянии
staged.

Сделаем изменения

$ echo "Hello World" > file_3.txt
$ echo "Hello World" >> file_2.txt

$ git add .

$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   file_2.txt
	new file:   file_3.txt

$ git diff --staged
diff --git a/file_2.txt b/file_2.txt
index e965047..727b041 100644
--- a/file_2.txt
+++ b/file_2.txt
@@ -1 +1,2 @@
 Hello
+Hello World
diff --git a/file_3.txt b/file_3.txt
new file mode 100644
index 0000000..557db03
--- /dev/null
+++ b/file_3.txt
@@ -0,0 +1 @@
+Hello World

Это пригодится дл того, чтобы перед commit'ом еще раз убедится в том,
какие изменения будут сделаны в репозиторий.

Вот например, мы поняли, что не хотим копировать их в репозиторий.

$ git restore --staged file_2.txt
$ git restore --staged file_3.txt

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   file_2.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	file_3.txt

no changes added to commit (use "git add" and/or "git commit -a")

Ну, и если мы хоти, то можем убрать изменения сделанные после последнего
commit'а.

$ git restore file_2.txt

$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	file_3.txt

nothing added to commit but untracked files present (use "git add" to track)


---------------------------------
Игнорирование файлов и директорий
---------------------------------

Например у нас есть файлы или директории, которые я не хочу отправлять в репозиторий

$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	file_3.txt

nothing added to commit but untracked files present (use "git add" to track)

$ nano .gitignore
file_3.txt

$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	.gitignore

nothing added to commit but untracked files present (use "git add" to track)

$ git add .

$ git commit -m "We add file - .gitignore"

$ git status
On branch master
nothing to commit, working tree clean



---------------------------------
Разъяснение касательно директорий
---------------------------------

Что касается папок в репозитории, так они попадают туда, если там есть файлы

$ mkdir {folder_1,folder_2}

$ git status
On branch master
nothing to commit, working tree clean

$ cp file_1.txt folder_1/
$ cp file_1.txt folder_2/

Как мы видим, теперь директории попали в репозиторий, но не видно что именно в них.

$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	folder_1/
	folder_2/

nothing added to commit but untracked files present (use "git add" to track)

Чтобы увидеть какие именно файлы в директориях

$ git status -uall
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	folder_1/file_1.txt
	folder_2/file_1.txt

nothing added to commit but untracked files present (use "git add" to track)

$ git add .

$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	new file:   folder_1/file_1.txt
	new file:   folder_2/file_1.txt

$ git commit -m "Copy file_1.txt, file_2.txt in folder_1 folder"
[master 68484f6] Copy file_1.txt, file_2.txt in folder_1 folder
 2 files changed, 6 insertions(+)
 create mode 100644 folder_1/file_1.txt
 create mode 100644 folder_2/file_1.txt
denisb@denisb-ws:~/WORK/test$ git status
On branch master
nothing to commit, working tree clean

Директории, так же как и файлы можно игнорировать репозиторием

$ mkdir folder_3
$ cp file_2.txt folder_3/

$ git status -uall
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	folder_3/file_2.txt

nothing added to commit but untracked files present (use "git add" to track)

$ nano .gitignore
file_3.txt
folder_3/*

Как мы видим у нас только появились изменения в конфигурационном файле, а директория
игнорируется.

$ git status -uall
On branch master
Changes not staged for commit:
 (use "git add <file>..." to update what will be committed)
 (use "git restore <file>..." to discard changes in working directory)
 modified:   .gitignore

no changes added to commit (use "git add" and/or "git commit -a")

$ git add .

$ git commit -m "Modified .gitignore file"
[master dc70abc] Modified .gitignore file
 1 file changed, 1 insertion(+)

$ git status -uall
On branch master
nothing to commit, working tree clean




---------------
Работа с GitHub
---------------


-----------------
Создание аккаунта
-----------------

Это делается очень легко.
Вот сайт - https://github.com/


-----------------------------------------------------------------------
Создание репозитория и добавление ранее созданный локальный репозиторий
-----------------------------------------------------------------------

-----------
1-й вариант
-----------

Сделаем некоторые подготовительные работы с локальным репозиторием,
который у нас был создан ранее.

$ mv ~/test ~/test_Local


Создание репозитория на Github. Делается очень легко.


После того, как пустой удаленный (Remote) репозиторий был создан,
нужно скопировать (clone) его к себе на компьютер.

$ git clone https://github.com/bochinskii/test.git
Cloning into 'test'...
warning: You appear to have cloned an empty repository.

$ cd ~/test

$ git status
On branch main

No commits yet

nothing to commit (create/copy files and use "git add" to track)

Перенесем файлы из локального репозитория в удаленный

$ rsync -avzhv --exclude ".git" ~/test_Local/ ~/test/


$ git status -uall
On branch main

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	.gitignore
	file_1.txt
	file_2.txt
	folder_1/file_1.txt
	folder_2/file_1.txt

nothing added to commit but untracked files present (use "git add" to track)

$ git add .
$ git status -uall
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	new file:   .gitignore
	new file:   file_1.txt
	new file:   file_2.txt
	new file:   folder_1/file_1.txt
	new file:   folder_2/file_1.txt

$ git commit -m "Init commit"
[main (root-commit) ae590e0] Init commit
 5 files changed, 12 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 file_1.txt
 create mode 100644 file_2.txt
 create mode 100644 folder_1/file_1.txt
 create mode 100644 folder_2/file_1.txt

$ git status -uall
On branch main
Your branch is based on 'origin/main', but the upstream is gone.
  (use "git branch --unset-upstream" to fixup)

nothing to commit, working tree clean

Отправим в GitHub.
Но, как видим с августа 2021 года парольная аутентификация отменена.

$ git push origin
Username for 'https://github.com': bochinskii
Password for 'https://bochinskii@github.com':
remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.
remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.
fatal: Authentication failed for 'https://github.com/bochinskii/test.git/'


Для аутентификации нужно использовать персональный токен доступа (personal access token)

https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token


Пробуем еще раз

$ export GITHUB_ACCESS_TOKEN=<youe personal access token>

$ git push https://$GITHUB_ACCESS_TOKEN@github.com/bochinskii/test.git

Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Delta compression using up to 6 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (6/6), 456 bytes | 228.00 KiB/s, done.
Total 6 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/bochinskii/test.git
 * [new branch]      main -> main

Вот атк можно посмотреть с каким удаленным репозиторием связан данный локальный
репозиторий

$ git remote -v
origin	https://github.com/bochinskii/test.git (fetch)
origin	https://github.com/bochinskii/test.git (push)

Теперь, когда мы вносим изменения, то нужно делать так

$ echo "Hello again" > file_4.txt

$ git status
On branch main
Your branch is based on 'origin/main', but the upstream is gone.
  (use "git branch --unset-upstream" to fixup)

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	file_4.txt

nothing added to commit but untracked files present (use "git add" to track)

$ git add .

$ git status
On branch main
Your branch is based on 'origin/main', but the upstream is gone.
  (use "git branch --unset-upstream" to fixup)

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	new file:   file_4.txt

$ git commit -m "Add file - file_4.txt"
[main ac6668a] Add file - file_4.txt
 1 file changed, 1 insertion(+)
 create mode 100644 file_4.txt

$ git status
On branch main
Your branch is based on 'origin/main', but the upstream is gone.
  (use "git branch --unset-upstream" to fixup)

nothing to commit, working tree clean

$ git push https://$GITHUB_ACCESS_TOKEN@github.com/bochinskii/test.git
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 6 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 303 bytes | 303.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/bochinskii/test.git
   ae590e0..ac6668a  main -> main



-----------
2-й вариант
-----------

Мы создали еще один репозиторий на GitHub.

У нас есть локальный репозиторий - Git.
Перенесем его в удаленный репозиторий на GitHub.

$ cd ~/Git

$ git remote add origin https://$GITHUB_ACCESS_TOKEN@github.com/bochinskii/Git.git

$ git branch -M main

$ git push -u origin main

Вот атк можно посмотреть с каким удаленным репозиторием связан данный локальный
репозиторий

$ git remote -v
origin	https://<your private access token>@github.com/bochinskii/Git.git (fetch)
origin	https://<your private access token>@github.com/bochinskii/Git.git (push)



Теперь, когда мы делаем изменения мы делаем так

$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   Git.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git add .

$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   Git.txt

$ git commit -m "Modify Git.txt file"
[main 74715f0] Modify Git.txt file
 1 file changed, 10 insertions(+), 7 deletions(-)

$ git status
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean

$ git push -u origin main
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 6 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 362 bytes | 362.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/bochinskii/Git.git
   1cc057b..74715f0  main -> main
branch 'main' set up to track 'origin/main'.


--------------------------------------------------------
Используем в качестве логина не токен, а SSH (для Linux)
--------------------------------------------------------

$ cd ~/test


Генерируем ssh ключи

ssh-keygen -t rsa -b 4096 -C "denis.bochinskii@gmail.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/home/denisb/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/denisb/.ssh/id_rsa
Your public key has been saved in /home/denisb/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:CVyp9wJesfGwIyUKwHmCywhJX7UPbAZ8WHEy94DtG9w denis.bochinskii@gmail.com
The key's randomart image is:
+---[RSA 4096]----+
|=+. .o+*==       |
|++o..+++%.o      |
|+.oo .+XoB..     |
|o.  . *.O=.E     |
|     . =S+o      |
|      . ...      |
|         .       |
|                 |
|                 |
+----[SHA256]-----+


Далее копируем текст публичного ключа и вставляем в настройки профиля на Github.

Посмотрим как взаимосвязаны локальный репозиторий и удаленный

$ git remote -v
origin	https://github.com/bochinskii/test.git (fetch)
origin	https://github.com/bochinskii/test.git (push)

Изменяем

$ git remote set-url origin git@github.com:bochinskii/test.git

$ git remote -v
origin	git@github.com:bochinskii/test.git (fetch)
origin	git@github.com:bochinskii/test.git (push)


Проверим

$ echo "Hello" > file_5.txt

$ git status
On branch main
Your branch is based on 'origin/main', but the upstream is gone.
  (use "git branch --unset-upstream" to fixup)

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	file_5.txt

nothing added to commit but untracked files present (use "git add" to track)


$ git add .

$ git commit -m "Add file - file_5.txt"
[main f4778d5] Add file - file_5.txt
 1 file changed, 1 insertion(+)
 create mode 100644 file_5.txt


$ git status
On branch main
Your branch is based on 'origin/main', but the upstream is gone.
  (use "git branch --unset-upstream" to fixup)

nothing to commit, working tree clean

$ git push origin
The authenticity of host 'github.com (140.82.121.3)' can't be established.
ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added 'github.com' (ED25519) to the list of known hosts.
Enumerating objects: 9, done.
Counting objects: 100% (9/9), done.
Delta compression using up to 6 threads
Compressing objects: 100% (6/6), done.
Writing objects: 100% (7/7), 806 bytes | 100.00 KiB/s, done.
Total 7 (delta 3), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (3/3), completed with 1 local object.
To github.com:bochinskii/test.git
   ac6668a..f4778d5  main -> main


----------------------------------------------------------
Используем в качестве логина не токен, а SSH (для Windows)
----------------------------------------------------------

Во время установки Git на Windows были установлены еще дополнительные утилиты.
Одна из них - "Git Bash".

По факту это bash надстройка. В ней мы генерируем ssh ключи так же как и в Linux'е.




-------------------------------
Работа с витвлениями (branches)
-------------------------------


По-умолчанию репозиторий создается в branch'е - "Master (Main)". По факту данный branch
является "золотым". Т.е. на самом деле как происходит:
- Создается репозиторий
- Если уже еть локальный репозиторий, то делается привязка
- Делается копия Master (Main) brach'а в другой branch, где делаются все операции с кодом.
- Когда уже код проверен и вы убеждены, что все работает хорошо, то делается -
marge branch'а в master (Main) branch.
- Если вы больше не будите делать изменения в вашем коде, то "другой" branch удаляют.



------------------------------------------------------
Пример использования branch'ей в локальном репозитории
------------------------------------------------------

$ mkdir ~/test2; cd ~/test2


$ git init .
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint:
hint: 	git config --global init.defaultBranch <name>
hint:
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint:
hint: 	git branch -m <name>
Initialized empty Git repository in /home/denisb/WORK/test2/.git/


Данная команда показывает какие branch'и есть в данном репозитории.
Они не показываются до первого commit'а.

$ git branch

$ echo "First string" > file1.txt

$ git add .

$ git commit -m "Create file1.txt"
[master (root-commit) 0f06219] Create file1.txt
 1 file changed, 1 insertion(+)
 create mode 100644 file1.txt

$ git status
On branch master
nothing to commit, working tree clean

$ git branch
* master

Сделаем копию нашего branch'а , назовем его - "dev" и будем работать
(т.е. делать изменение контента репозитория) там.

$ git branch dev
denisb@denisb-ws:~/WORK/test2$ git branch
 dev
* master

$ git checkout dev
Switched to branch 'dev'

$ git branch
* dev
 master

Или с помощью одной команды (создадим branch "test" и перейдем в него).

$ git checkout -b test

$ git branch
  dev
  master
* test



Удалить определенный branch.

$ git checkout dev
Switched to branch 'dev'

$ git branch -d test
Deleted branch test (was 0f06219).

$ git branch
* dev
  master




Сделаем изменения (напомню, что мы работаем с dev branch'ем)

$ echo "Second string" >> file1.txt
$ echo "First string" > file2.txt

$ git status
On branch dev
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   file1.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	file2.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git add .

$ git status
On branch dev
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   file1.txt
	new file:   file2.txt

$ git commit -m "Modify file1.txt and create file2.txt"
[dev 6ca123a] Modify file1.txt and create file2.txt
 2 files changed, 2 insertions(+)
 create mode 100644 file2.txt

$ git status
On branch dev
nothing to commit, working tree clean




Вот так выглядит лог данного репозитория. Как мы видим, у нас было сделано два
commit'а. Один в branch master, а второй в dev.

$ git log
commit 6ca123adf22bd57b92a7066290019b50b07b8f08 (HEAD -> dev)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 14:21:12 2022 +0300

    Modify file1.txt and create file2.txt

commit 0f0621989091d6cd908bbe6417eb6107a19e92e8 (master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 13:57:50 2022 +0300

    Create file1.txt



А теперь для наглядности посмотрим как выглядит контент на наших branch'ах.
Само собой контент репозитория должен отличаться.

$ git branch
* dev
  master

$ ls -l
total 8
-rw-rw-r-- 1 denisb denisb 27 апр 27 14:20 file1.txt
-rw-rw-r-- 1 denisb denisb 13 апр 27 14:20 file2.txt

$ cat file1.txt
First string
Second string

$ cat file2.txt
First string

$ git checkout master
Switched to branch 'master'

$ git branch
  dev
* master

$ ls -l
total 4
-rw-rw-r-- 1 denisb denisb 13 апр 27 14:26 file1.txt

$ cat file1.txt
First string


Например, нас устраивает код в dev и теперь мы хотим перенести его в master
branch.

$ git branch
  dev
* master

$ git merge dev
Updating 0f06219..6ca123a
Fast-forward
 file1.txt | 1 +
 file2.txt | 1 +
 2 files changed, 2 insertions(+)
 create mode 100644 file2.txt


Как мы видим все commit'ы у нас на обоих bracnh'ах.

$ git log
commit 6ca123adf22bd57b92a7066290019b50b07b8f08 (HEAD -> master, dev)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 14:21:12 2022 +0300

    Modify file1.txt and create file2.txt

commit 0f0621989091d6cd908bbe6417eb6107a19e92e8
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 13:57:50 2022 +0300

    Create file1.txt


Опять перейдем в dev, сделаем изменения и посмотрим что получилось

$ git checkout dev
Switched to branch 'dev'
denisb@denisb-ws:~/WORK/test2$ git branch
* dev
  master

$ echo "First string" > file3.txt
$ git add .
$ git commit -m "Create file3.txt"
[dev fd8a4e1] Create file3.txt
 1 file changed, 1 insertion(+)
 create mode 100644 file3.txt


Теперь опять видим, что последний commit совершен только на dev.

$ git log
commit fd8a4e12cc486e5ab7e9c76254c35ae2b045ed1c (HEAD -> dev)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 14:45:08 2022 +0300

    Create file3.txt

commit 6ca123adf22bd57b92a7066290019b50b07b8f08 (master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 14:21:12 2022 +0300

    Modify file1.txt and create file2.txt

commit 0f0621989091d6cd908bbe6417eb6107a19e92e8
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 13:57:50 2022 +0300

    Create file1.txt



А теперь не будем делать merge. Допустим мы поняли, что напортачили в dev
и теперь хотим перейти в master, а dev удалить.

$ git checkout master
Switched to branch 'master'
denisb@denisb-ws:~/WORK/test2$ git branch
  dev
* master


Мы видм ошибку, которая гворит о том, что в dev был сделан commit, но мы не сделали
merge в master.

$ git branch -d dev
error: The branch 'dev' is not fully merged.
If you are sure you want to delete it, run 'git branch -D dev'.


Удалить такой branch можно вот так

$ git branch -D dev
Deleted branch dev (was fd8a4e1).



----------------------------------------
Варианты возврата на определенный commit
----------------------------------------


----------------------------------------------------
Откатиться на определенный commit с помощью checkout
(не удаляя commit'ы)
----------------------------------------------------

Смотрим какие commit'ы у нас есть

$ git log
commit 780511b9ff4f9ad9f65301eecb96160d37878bf1 (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 13:02:23 2022 +0300

    Create file3.txt

commit 6ca123adf22bd57b92a7066290019b50b07b8f08
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 14:21:12 2022 +0300

    Modify file1.txt and create file2.txt

commit 0f0621989091d6cd908bbe6417eb6107a19e92e8
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 13:57:50 2022 +0300

    Create file1.txt


$ ls -l
total 12
-rw-rw-r-- 1 denisb denisb 27 апр 28 13:05 file1.txt
-rw-rw-r-- 1 denisb denisb 13 апр 28 13:05 file2.txt
-rw-rw-r-- 1 denisb denisb 13 апр 28 13:05 file3.txt


Перейдем на первый сделанный commit (введем его хэш), в котором создан только file1.txt с одной
текстовой строкой

$ git checkout 0f0621989091d6cd908bbe6417eb6107a19e92e8
Note: switching to '0f0621989091d6cd908bbe6417eb6107a19e92e8'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 0f06219 Create file1.txt


Можно заметить, что мы (HEAD) отсоеденены (detached) от нашего последнего commit'а.

Как мы видим у нас только первый commit. Мы можем внести изменения и сделать commit,
но если мы потом вернем все как было, то мы потеряем данный commit.

Из подсказки в команде checkout можно заметить, что такой метод подходит для того,
чтобы откатиться на определенный commit, возможно сделать какие-то изменения,
скопировать его в новый branch, ну и если надо, то восстановить обратно все commit'ы.

$ git log
commit 0f0621989091d6cd908bbe6417eb6107a19e92e8 (HEAD)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 13:57:50 2022 +0300

    Create file1.txt

$ ls -l
total 4
-rw-rw-r-- 1 denisb denisb 13 апр 28 13:07 file1.txt

$ cat file1.txt
First string

Внесем изменения и сделаем commit

$ rm *

$ $ touch super_puper_file_{1,2,3,4,5}.txt

$ ls -l
total 0
-rw-rw-r-- 1 denisb denisb 0 апр 28 13:30 super_puper_file_1.txt
-rw-rw-r-- 1 denisb denisb 0 апр 28 13:30 super_puper_file_2.txt
-rw-rw-r-- 1 denisb denisb 0 апр 28 13:30 super_puper_file_3.txt
-rw-rw-r-- 1 denisb denisb 0 апр 28 13:30 super_puper_file_4.txt
-rw-rw-r-- 1 denisb denisb 0 апр 28 13:30 super_puper_file_5.txt

$ git status
HEAD detached at 0f06219
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	deleted:    file1.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	super_puper_file_1.txt
	super_puper_file_2.txt
	super_puper_file_3.txt
	super_puper_file_4.txt
	super_puper_file_5.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git add .

$ git commit -m "I'am crazy"
[detached HEAD cf20ecf] I'am crazy
 6 files changed, 1 deletion(-)
 delete mode 100644 file1.txt
 create mode 100644 super_puper_file_1.txt
 create mode 100644 super_puper_file_2.txt
 create mode 100644 super_puper_file_3.txt
 create mode 100644 super_puper_file_4.txt
 create mode 100644 super_puper_file_5.txt

$ git status
HEAD detached from 0f06219
nothing to commit, working tree clean

Как мы видим у нас появился еще один commit, но как мы писали ранее,
стоит нам вернуть все обратно, как все сделанные commit'ы (в нашем случае только
один) удалятся.

$ git log
commit cf20ecfd7146ab497dc24ab58b3f4171cb33567d (HEAD)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 13:31:02 2022 +0300

    I'am crazy

commit 0f0621989091d6cd908bbe6417eb6107a19e92e8
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 13:57:50 2022 +0300

    Create file1.txt



Вернут все commit'ы обратно. Тут можно заметить, что нас предупреждают о том,
что commit "I'am crazy" удалился.

$ git checkout master
Warning: you are leaving 1 commit behind, not connected to
any of your branches:

  cf20ecf I'am crazy

If you want to keep it by creating a new branch, this may be a good time
to do so with:

 git branch <new-branch-name> cf20ecf

Switched to branch 'master'

$ git log
commit 780511b9ff4f9ad9f65301eecb96160d37878bf1 (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 13:02:23 2022 +0300

    Create file3.txt

commit 6ca123adf22bd57b92a7066290019b50b07b8f08
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 14:21:12 2022 +0300

    Modify file1.txt and create file2.txt

commit 0f0621989091d6cd908bbe6417eb6107a19e92e8
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 13:57:50 2022 +0300

    Create file1.txt


$ ls -l
total 12
-rw-rw-r-- 1 denisb denisb 27 апр 28 13:34 file1.txt
-rw-rw-r-- 1 denisb denisb 13 апр 28 13:34 file2.txt
-rw-rw-r-- 1 denisb denisb 13 апр 28 13:34 file3.txt



------------------------------------------------
(Бонус) Изменить комментарий последнего commit'а
------------------------------------------------

$ git log
commit 780511b9ff4f9ad9f65301eecb96160d37878bf1 (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 13:02:23 2022 +0300

    Create file3.txt

commit 6ca123adf22bd57b92a7066290019b50b07b8f08
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 14:21:12 2022 +0300

    Modify file1.txt and create file2.txt

commit 0f0621989091d6cd908bbe6417eb6107a19e92e8
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 13:57:50 2022 +0300

    Create file1.txt


После данной команды откроется редактор в котором можно изменить комментарий
к последнему commit'у

$ git commit --amend
[master b7d5206] Add file3.txt
 Date: Thu Apr 28 13:02:23 2022 +0300
 1 file changed, 1 insertion(+)
 create mode 100644 file3.txt

$ git log
commit b7d5206095b24e1e4d9b57a3cde0360d26938ada (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 13:02:23 2022 +0300

    Add file3.txt

commit 6ca123adf22bd57b92a7066290019b50b07b8f08
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 14:21:12 2022 +0300

    Modify file1.txt and create file2.txt

commit 0f0621989091d6cd908bbe6417eb6107a19e92e8
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 13:57:50 2022 +0300

    Create file1.txt





----------------------------------------------------
Откатиться на определенный commit с помощью reset
(удаляя commit'ы)
----------------------------------------------------


$ git log
commit 734ea53eee2de32d7533b3b37e95421bfb1dd37a (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 13:51:21 2022 +0300

    Add file6.txt

commit 3ee4e0e9e6fc9aa5b5e7eb37aac076b790488d3d
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 13:50:51 2022 +0300

    Add file5.txt

commit ac5c288306ab981a73ca674b9086ac8bd1ab43c9
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 13:49:54 2022 +0300

    Add file4.txt

commit b7d5206095b24e1e4d9b57a3cde0360d26938ada
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 13:02:23 2022 +0300

    Add file3.txt

commit 6ca123adf22bd57b92a7066290019b50b07b8f08
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 14:21:12 2022 +0300

    Modify file1.txt and create file2.txt

commit 0f0621989091d6cd908bbe6417eb6107a19e92e8
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 13:57:50 2022 +0300

    Create file1.txt

$ ls -l
total 12
-rw-rw-r-- 1 denisb denisb 27 апр 28 13:34 file1.txt
-rw-rw-r-- 1 denisb denisb 13 апр 28 13:34 file2.txt
-rw-rw-r-- 1 denisb denisb 13 апр 28 13:34 file3.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 13:49 file4.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 13:50 file5.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 13:51 file6.txt

Например, нам нужно вернуться на commit - "Add file3.txt", а это значит,
что нам нужно удалить 3-и commit'а с верху.

$ git reset --hard HEAD~3
HEAD is now at b7d5206 Add file3.txt

$ git log
commit b7d5206095b24e1e4d9b57a3cde0360d26938ada (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 13:02:23 2022 +0300

    Add file3.txt

commit 6ca123adf22bd57b92a7066290019b50b07b8f08
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 14:21:12 2022 +0300

    Modify file1.txt and create file2.txt

commit 0f0621989091d6cd908bbe6417eb6107a19e92e8
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Wed Apr 27 13:57:50 2022 +0300

    Create file1.txt

$ ls -l
total 12
-rw-rw-r-- 1 denisb denisb 27 апр 28 13:34 file1.txt
-rw-rw-r-- 1 denisb denisb 13 апр 28 13:34 file2.txt
-rw-rw-r-- 1 denisb denisb 13 апр 28 13:34 file3.txt



------------------
Удаление commit'ов
------------------


Естественно, что commit'ы занимают место на диске. Если вы хотите удалить
ненужные commit'ы и тем самым освободить место, воспользуйтесь данным методом.

Тут логика достаточно сложная. Лучше разобрать на примере.

$ git log
commit 3544a91b67aaebde828e894966baa88cd7277e57 (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:11:14 2022 +0300

    Add f7.txt

commit c19a1d2a5552b6dc430926107ba07e7a6052a4b9
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:11:06 2022 +0300

    Add f6.txt

commit 3d6efb347d36fe88cb7d41843bfd5299b9485637
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:10:55 2022 +0300

    Add f5.txt

commit 34c1d545681b4764804b96e21a43cee501c43ac5
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:10:48 2022 +0300

    Add f4.txt

commit b7d084529dc18a92796a05b27f2934d7fbb73fbb
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:10:40 2022 +0300

    Add f3.txt

commit f39d586b4fbc5bed2125e7a97be23b9afb8918db
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:10:30 2022 +0300

    Add f2.txt

commit c884d6c5399ecedb69729b80ab8f986a073dd6ac
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:10:20 2022 +0300

    Add f1.txt

commit 1206a0b070ae7936d492eb4a35cb1de284e33532
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:09:41 2022 +0300

    Init commit (README)

$ ls -l
total 4
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f1.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f2.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f3.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f4.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f5.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f6.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:11 f7.txt
-rw-rw-r-- 1 denisb denisb 31 апр 28 14:08 README.txt


Мы удаляем commit'ы с верху в низ, но файлы и изменения в репозитории остаются прежние

$ git reset --soft HEAD~4

$ git log
commit b7d084529dc18a92796a05b27f2934d7fbb73fbb (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:10:40 2022 +0300

    Add f3.txt

commit f39d586b4fbc5bed2125e7a97be23b9afb8918db
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:10:30 2022 +0300

    Add f2.txt

commit c884d6c5399ecedb69729b80ab8f986a073dd6ac
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:10:20 2022 +0300

    Add f1.txt

commit 1206a0b070ae7936d492eb4a35cb1de284e33532
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:09:41 2022 +0300

    Init commit

$ ls -l
total 4
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:57 f1.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:57 f2.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:57 f3.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:57 f4.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:57 f5.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:57 f6.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:57 f7.txt
-rw-rw-r-- 1 denisb denisb 31 апр 28 14:57 README.txt


Теперь давайте перейдем на самый первый commit.

$ git checkout 1206a0b070ae7936d492eb4a35cb1de284e33532
A	f4.txt
A	f5.txt
A	f6.txt
A	f7.txt
Note: switching to '1206a0b070ae7936d492eb4a35cb1de284e33532'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 1206a0b Init commit

$ git log
commit 1206a0b070ae7936d492eb4a35cb1de284e33532 (HEAD)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:09:41 2022 +0300

    Init commit


Что произошло?

С помощью команды "git reset --soft HEAD~4", удалили последние 4 comit'а, а
изменения в этих commit'ах (создание файлов f4.txt - f7.txt) были пернесены в самый первый commit.

Теперь мы с помощью команды - "git checkout 1206a0b070ae7936d492eb4a35cb1de284e33532"
перешли в самый первый commit, где небыло файлов вобоще (кроме файла README.txt),
но мы видим еще и файлы (f4.txt - f7.txt) созданные в commit'ах, которые мы удалили ранее.

Выглядит несколько запутано, но пример довольно таки наглядный.

$ ls -l
total 4
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:57 f4.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:57 f5.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:57 f6.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:57 f7.txt
-rw-rw-r-- 1 denisb denisb 31 апр 28 14:57 README.txt


Этот пример не особо практичный т.к. подобные действия только запутывают.
Поэтому удаление commit'ов в основном применяется тогда, когда
вы сделали последний commit и вы уверены, что предыдущие не нужны. И тогда вы делаете
soft reset на самый первый commit, хотя изменения остаются.

Вот пример


$ ls -l
total 4
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f1.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f2.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f3.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f4.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f5.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f6.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:11 f7.txt
-rw-rw-r-- 1 denisb denisb 31 апр 28 14:08 README.txt

$ git log
commit 3544a91b67aaebde828e894966baa88cd7277e57 (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:11:14 2022 +0300

    Add f7.txt

commit c19a1d2a5552b6dc430926107ba07e7a6052a4b9
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:11:06 2022 +0300

    Add f6.txt

commit 3d6efb347d36fe88cb7d41843bfd5299b9485637
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:10:55 2022 +0300

    Add f5.txt

commit 34c1d545681b4764804b96e21a43cee501c43ac5
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:10:48 2022 +0300

    Add f4.txt

commit b7d084529dc18a92796a05b27f2934d7fbb73fbb
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:10:40 2022 +0300

    Add f3.txt

commit f39d586b4fbc5bed2125e7a97be23b9afb8918db
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:10:30 2022 +0300

    Add f2.txt

commit c884d6c5399ecedb69729b80ab8f986a073dd6ac
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:10:20 2022 +0300

    Add f1.txt

commit 1206a0b070ae7936d492eb4a35cb1de284e33532
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:09:41 2022 +0300

    Init commit

$ git reset --soft HEAD~7

$ ls -l
total 4
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f1.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f2.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f3.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f4.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f5.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:10 f6.txt
-rw-rw-r-- 1 denisb denisb  0 апр 28 14:11 f7.txt
-rw-rw-r-- 1 denisb denisb 31 апр 28 14:08 README.txt

$ git log
commit 1206a0b070ae7936d492eb4a35cb1de284e33532 (HEAD -> master)
Author: Denis Bochinskii <denis.bochinskii@gmail.com>
Date:   Thu Apr 28 14:09:41 2022 +0300

    Init commit






-------------------------------------------------
